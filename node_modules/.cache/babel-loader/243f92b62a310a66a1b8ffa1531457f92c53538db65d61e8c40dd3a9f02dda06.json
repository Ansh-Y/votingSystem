{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\voting-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { Auth } from '../services/api';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    const verifyStoredAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem('token');\n        const storedUser = localStorage.getItem('user');\n        if (storedToken && storedUser) {\n          // Verify token with the backend\n          const userData = await Auth.verifyToken();\n\n          // Set user state if token is valid\n          setUser(userData);\n          setIsAuthenticated(true);\n        }\n      } catch (err) {\n        // Clear stored data if verification fails\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyStoredAuth();\n  }, []);\n\n  // User login function\n  const login = async (email, password) => {\n    const response = await Auth.login(email, password);\n\n    // Save token and user data to local storage\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n\n    // Update state\n    setUser(response.user);\n    setIsAuthenticated(true);\n    return response;\n  };\n\n  // User registration function\n  const register = async (name, email, password, role) => {\n    const response = await Auth.register(name, email, password, role);\n    return response;\n  };\n\n  // User logout function\n  const logout = () => {\n    // Clear local storage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user data function (for profile updates)\n  const updateUser = userData => {\n    // Update local storage\n    localStorage.setItem('user', JSON.stringify({\n      ...user,\n      ...userData\n    }));\n\n    // Update state\n    setUser({\n      ...user,\n      ...userData\n    });\n  };\n\n  // Provide the auth context values\n  const contextValue = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","Auth","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","verifyStoredAuth","storedToken","localStorage","getItem","storedUser","userData","verifyToken","err","removeItem","login","email","password","response","setItem","token","JSON","stringify","register","name","role","logout","updateUser","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/voting-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { Auth } from '../services/api';\r\n\r\n// Create the context\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Check if user is already logged in on mount\r\n  useEffect(() => {\r\n    const verifyStoredAuth = async () => {\r\n      try {\r\n        const storedToken = localStorage.getItem('token');\r\n        const storedUser = localStorage.getItem('user');\r\n        \r\n        if (storedToken && storedUser) {\r\n          // Verify token with the backend\r\n          const userData = await Auth.verifyToken();\r\n          \r\n          // Set user state if token is valid\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (err) {\r\n        // Clear stored data if verification fails\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    verifyStoredAuth();\r\n  }, []);\r\n  \r\n  // User login function\r\n  const login = async (email, password) => {\r\n    const response = await Auth.login(email, password);\r\n    \r\n    // Save token and user data to local storage\r\n    localStorage.setItem('token', response.token);\r\n    localStorage.setItem('user', JSON.stringify(response.user));\r\n    \r\n    // Update state\r\n    setUser(response.user);\r\n    setIsAuthenticated(true);\r\n    \r\n    return response;\r\n  };\r\n  \r\n  // User registration function\r\n  const register = async (name, email, password, role) => {\r\n    const response = await Auth.register(name, email, password, role);\r\n    return response;\r\n  };\r\n  \r\n  // User logout function\r\n  const logout = () => {\r\n    // Clear local storage\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Reset state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n  \r\n  // Update user data function (for profile updates)\r\n  const updateUser = (userData) => {\r\n    // Update local storage\r\n    localStorage.setItem('user', JSON.stringify({\r\n      ...user,\r\n      ...userData\r\n    }));\r\n    \r\n    // Update state\r\n    setUser({\r\n      ...user,\r\n      ...userData\r\n    });\r\n  };\r\n  \r\n  // Provide the auth context values\r\n  const contextValue = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}