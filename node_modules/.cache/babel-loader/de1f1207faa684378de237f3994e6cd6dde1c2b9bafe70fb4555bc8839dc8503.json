{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 (Unauthorized) errors\n  if (error.response && error.response.status === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API calls\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  register: (name, email, password, role) => api.post('/auth/register', {\n    name,\n    email,\n    password,\n    role\n  })\n};\n\n// Polls API calls\nexport const pollsAPI = {\n  getOngoingPolls: () => api.get('/polls/ongoing'),\n  getPollDetails: id => api.get(`/polls/${id}`),\n  createPoll: pollData => api.post('/polls/create', pollData),\n  endPoll: id => api.put(`/polls/${id}/end`),\n  vote: (pollId, candidateId) => api.post(`/polls/${pollId}/vote`, {\n    candidateId\n  }),\n  getResults: id => api.get(`/polls/${id}/results`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authAPI","login","email","password","post","register","name","role","pollsAPI","getOngoingPolls","get","getPollDetails","id","createPoll","pollData","endPoll","put","vote","pollId","candidateId","getResults"],"sources":["C:/Users/lenovo/voting-system/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add a request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add a response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle 401 (Unauthorized) errors\r\n    if (error.response && error.response.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API calls\r\nexport const authAPI = {\r\n  login: (email, password) => api.post('/auth/login', { email, password }),\r\n  register: (name, email, password, role) => api.post('/auth/register', { name, email, password, role })\r\n};\r\n\r\n// Polls API calls\r\nexport const pollsAPI = {\r\n  getOngoingPolls: () => api.get('/polls/ongoing'),\r\n  getPollDetails: (id) => api.get(`/polls/${id}`),\r\n  createPoll: (pollData) => api.post('/polls/create', pollData),\r\n  endPoll: (id) => api.put(`/polls/${id}/end`),\r\n  vote: (pollId, candidateId) => api.post(`/polls/${pollId}/vote`, { candidateId }),\r\n  getResults: (id) => api.get(`/polls/${id}/results`)\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrBC,KAAK,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;EACxEE,QAAQ,EAAEA,CAACC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,EAAEI,IAAI,KAAK5B,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAE;IAAEE,IAAI;IAAEJ,KAAK;IAAEC,QAAQ;IAAEI;EAAK,CAAC;AACvG,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,eAAe,EAAEA,CAAA,KAAM9B,GAAG,CAAC+B,GAAG,CAAC,gBAAgB,CAAC;EAChDC,cAAc,EAAGC,EAAE,IAAKjC,GAAG,CAAC+B,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EAC/CC,UAAU,EAAGC,QAAQ,IAAKnC,GAAG,CAACyB,IAAI,CAAC,eAAe,EAAEU,QAAQ,CAAC;EAC7DC,OAAO,EAAGH,EAAE,IAAKjC,GAAG,CAACqC,GAAG,CAAC,UAAUJ,EAAE,MAAM,CAAC;EAC5CK,IAAI,EAAEA,CAACC,MAAM,EAAEC,WAAW,KAAKxC,GAAG,CAACyB,IAAI,CAAC,UAAUc,MAAM,OAAO,EAAE;IAAEC;EAAY,CAAC,CAAC;EACjFC,UAAU,EAAGR,EAAE,IAAKjC,GAAG,CAAC+B,GAAG,CAAC,UAAUE,EAAE,UAAU;AACpD,CAAC;AAED,eAAejC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}